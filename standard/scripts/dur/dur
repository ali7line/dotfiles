#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from datetime import timedelta
from functools import wraps
from mutagen.mp3 import HeaderNotFoundError
from subprocess import run
from time import time
import argparse
import ffprobe3
import json
import mutagen
import os
        
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--type', required=True)
    args = parser.parse_args()
    return args
        
def timing(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        start = time()
        result = f(*args, **kwargs)
        end = time()
        print('Elapsed time: {}'.format(end-start))
        return result
    return wrapper

@timing
def get_meta(func, type_):
    total = 0
    path = os.environ.get('PWD')
    if not path:
        raise "PWD envionment variable not found"
    for dirpath, dirnames, filenames in os.walk(path):
        for filename in [f for f in filenames if f.endswith("."+type_)]:
            file_ = os.path.join(dirpath, filename) 
            #print(file_)
            out = func(file_)
            if out:
                total += int(float(out))
                print(total)
            else:
                print('no output for:', file_)
                # try another from the list
                pass

    return total


def mutagen_method(file_):
        try:
            meta = mutagen.File(file_)
            seconds = meta.info.length 
            return seconds
        except HeaderNotFoundError:
            print('some issue with library')
            return None


def ffprobe3_method(file_):
        try:
            meta = ffprobe3.FFProbe(file_)
            if len(meta.streams) > 0:
                seconds = meta.streams[0].duration
                print(seconds)
            return seconds
        except ValueError:
            print('some issue with library')
            return None


def system_method(file_):
    try:
        s = run([
            'ffprobe','-v', 'quiet',
            '-print_format', 'json', '-show_format',
            file_], capture_output=True)
        d = json.loads(s.stdout)
        seconds = d['format']['duration']
        return seconds
    except KeyError:
        print('there was an issue')
        return None


if __name__ == '__main__':
    args = parse_args()
    #get_meta(mutagen_method)
    out = get_meta(system_method, args.type)
    print(timedelta(seconds=out), 'sec')
    #ffprobe3_method()
