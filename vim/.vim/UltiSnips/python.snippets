############
#  HEADER  #
############
#snippet #! "python header" b
##!/usr/bin/env python
## -*- coding: utf-8 -*-
#
#endsnippet
#
#snippet #!2 "python2 header" b
##!/usr/bin/env python2
## -*- coding: utf-8 -*-
#$0
#endsnippet
#
#snippet #!3 "python3 header" b
##!/usr/bin/env python3
## -*- coding: utf-8 -*-
#$0
#endsnippet

snippet imp "" b
import ${0:module}
endsnippet

snippet from "" b
from ${1:package} import ${0:module}
endsnippet

snippet docs
"""
Authur:
Email: 
"""
endsnippet

###########
#  LOOPS  #
###########
snippet wh
while ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet dowh
while True:
	${1}
	if ${0:condition}:
		break
endsnippet

################
#  FILES I/O  #
################
snippet rfile
with open('${1:filename.txt}', 'rt') as f:
	data = f.read()
endsnippet

snippet rbfile
with open('${1:filename.bin}', 'rb') as f:
	data = f.read()
endsnippet

snippet rfileline
with open('${1:filename.txt}', 'rt'):
	for line in f:
		# process line
		${0}
endsnippet

snippet wfile
with open('${1:filename.txt}', 'wt') as f:
	f.write('string')
endsnippet

snippet wbfile
with open('${1:filename.bin}', 'wb') as f:
	f.write(b'hello world!\n')
endsnippet

snippet wfileprint
with open('${1:filename.txt}', 'wt') as f:
	print('sometext', file=f, sep=' ', end='\n')
endsnippet
priority -50

####################
# If / Else / Elif #
####################
snippet if "If" b
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet


###########################
## TRY / EXCEPT / FINALLY #
###########################
snippet try "Try / Except" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet trye "Try / Except / Else" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" b
try:
	${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

######################
# Assertions & Tests #
######################
snippet ae "Assert equal" b
self.assertEqual(${1:${VISUAL:first}},${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${1:${VISUAL:expression}})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:${VISUAL:expression}})
endsnippet

snippet aae "Assert almost equal" b
self.assertAlmostEqual(${1:${VISUAL:first}},${2:second})
endsnippet

snippet ar "Assert raises" b
self.assertRaises(${1:exception}, ${2:${VISUAL:func}}${3/.+/, /}${3:arguments})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${1:${VISUAL:expression}})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${1:${VISUAL:expression}})
endsnippet

##################################
# DATA STRUCTURES AND ALGORITHMS #
##################################
snippet lastnline "Keep the last N lines" b
from collections import deque

def search(lines, pattern, history,5):
	previous_line = deque(maxlen=history)
	for line in lines:
		if pattern in line:
			yield line, previous_lines
		previous_lines.append(line)
endsnippet

snippet maxn "Find Smallest N Items" b
import heapq
print(heapq.nlargest(3, nums)
endsnippet

snippet maxndic "Find Smallest N Items" b
import heapq
print(heapq.nlargest(3, nums, key=lambda s: s['price'])
endsnippet

snippet minn "Find Largest N Items" b
import heapq
print(heapq.nsmallest(3, nums)
endsnippet

snippet minndic "Find Largest N Items" b
import heapq
print(heapq.nsmallest(3, nums, key=lambda s: s['price'])
endsnippet

snippet pqueue "Priority Queue" b
import heapq

class PriorityQueue:
	def __init__(self):
		self._queue = []
		self._index = 0

	def push():
		heapq.heappush(self._queue, (-priority, self._index, item))
		self._index += 1

	def pop(self):
		return heapq.heappop(self._queue)[-1]


${0}
endsnippet

snippet odic "Ordered dictionary" b
from collections import OrderedDict

d = OrderedDict()
endsnippet


############
#  RANDOM  #
############
snippet randomrandom "gives a random number between 0-1" b
import random
r = random.random()
endsnippet

snippet randomint "gives a random number in range" b
import random
r = random.randint(0,10)
endsnippet

snippet randomshuffle "suffles variable in list" b
import random
v = range(1,10)
r = random.shuffle(v)
endsnippet

snippet randomchoice "gets one variable from list" b
import random
v = range(1,10)
r = random.choice(v)
endsnippet

snippet randomsample "gets N variable from list" b
import random
v = range(1,10)
r = random.sample(v, ${1:N})
endsnippet

################
snippet main_
if __name__ == '__main__':
	${0}
endsnippet

############
#  DJANGO  #
############
################################### MODELS
snippet mclass
class ${1}(models.Model):
	name = models.CharField(max_length=31)
	${0}
	def __str__(self):
		return self.name
	class Meta:
		ordering = ['name']

endsnippet

snippet if
models.IntegerField(max_length=255)
endsnippet 

snippet bf
models.BooleanField(max_length=255)
endsnippet 

snippet cf
models.CharField(max_length=31)
endsnippet 

snippet tf
models.TextField()
endsnippet 

snippet df
models.DateField()
endsnippet 

snippet sf
models.SlugField(max_length=31)
endsnippet 

snippet uf
models.URLField(max_length=255)
endsnippet 

snippet ef
models.EmailField(max_length=255)
endsnippet 

snippet mm
models.ManyToManyField(${0})
endsnippet 

snippet fk
models.ForeignKey(${0})
endsnippet 

################################### FROMS
snippet fclass
class ${0}(forms.ModelForm):
	class Meta:
		model = ${1}
		fields = '__all__'

endsnippet

snippet cff
forms.CharField(max_length=31)
endsnippet 

snippet tff
forms.TextField()
endsnippet 

snippet dff
forms.DateField()
endsnippet 

snippet sff
forms.SlugField(max_length=31)
endsnippet 

snippet uff
forms.URLField(max_length=255)
endsnippet 

snippet eff
forms.EmailField(max_length=255)
endsnippet 

snippet iff
forms.IntegerField(max_length=255)
endsnippet 

##############
#  CVS/JSON  #
##############
snippet jsondump "creates a json string from variable" b
import json
json.dump(${1:variable}
endsnippet

snippet rjson "reads a json file" b
import csv

with open('filename.json', 'r') as f:
    date = json.loads(f.read())

for item in data:
    print(item)
endsnippet

snippet rcsv "reads a csv file" b
import csv

with open('filename.csv', 'rb') as f:
    # reader = csv.DictReader(f)
    reader = csv.reader(f)
    for row in reader:
        print(row)
endsnippet

snippet rexcel "reads excell file" b
import xlrd
import pprint

book = xlrd.open_workbook('su.xlsx')
sheet = book.sheet_by_index(1)

data = {}
for i in range(14, sheet.nrows):
    row = sheet.row_values(i)
    country = row[1]
    data[country] = {
            'child_labor': {
                'total': [row[4], row[5]],
                'male': [row[6], row[7]],
                'female': [row[8], row[9]],
                },
            'child_marraige':{
                'married_by_15': row[10],
                'married_by_18': row[12],
                }
            }

    if country == 'Zimbabwe':
        break

pprint.pprint(data)
endsnippet
